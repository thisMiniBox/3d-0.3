#version 330 core
out vec4 FragColor;

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoords;

struct Material {
    vec3 ambient;
    sampler2D diffuseTexture;
    vec4 diffuse;
    sampler2D specularTexture;
    vec4 specular;
    float shininess;
}; 

struct PointLight {
    vec3 position;

    float constant;
    float linear;
    float quadratic;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};  
#define NR_POINT_LIGHTS 4
#define MIN_ALPHA 0.1

struct DirLight {
    vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};  
uniform DirLight dirLight;
uniform PointLight pointLights[NR_POINT_LIGHTS];

uniform Material material;
uniform vec3 viewPos;

vec4 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);
vec4 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir);

void main()
{
    // 属性
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);

    // 第一阶段：定向光照
    vec4 result = CalcDirLight(dirLight, norm, viewDir);
    // 第二阶段：点光源
    for(int i = 0; i < NR_POINT_LIGHTS; i++)
        result += CalcPointLight(pointLights[i], norm, FragPos, viewDir);    
    // 第三阶段：聚光
    //result += CalcSpotLight(spotLight, norm, FragPos, viewDir);    
    if(result.a < MIN_ALPHA)
        discard;
    FragColor = result;
    //FragColor = vec4(1.0);
}

vec4 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir)
{
    vec3 lightDir = normalize(-light.direction);
    // 漫反射着色
    float diff = max(dot(normal, lightDir), 0.0);
    // 镜面光着色
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // 合并结果
    vec4 ambient  = vec4(light.ambient,1.0)  * (texture(material.diffuseTexture, TexCoords));
    vec4 diffuse=texture(material.diffuseTexture, TexCoords);
    if(material.diffuse.a>1)
    {
        diffuse=material.diffuse;
    }
    else
    {
        diffuse  = vec4(light.diffuse,1.0)  * diff * mix(diffuse,vec4(material.diffuse.rgb,0),material.diffuse.a);
    }
    vec3 specular = (light.specular) * spec * mix(texture(material.specularTexture, TexCoords).rgb,(material.specular.rgb),material.specular.a);
    return (ambient + diffuse + vec4(specular,0.0));
}
vec4 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    // 衰减
    if(light.constant==0)
        return vec4(0.0f);
    float distance    = length(light.position - FragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + 
                    light.quadratic * (distance * distance)); 
    vec3 lightDir = normalize(light.position - fragPos);
    // 漫反射着色
    float diff = max(dot(normal, lightDir), 0.0);
    // 镜面光着色
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

    // 合并结果
    vec4 ambient  = vec4(light.ambient,0.0) ;// * material.ambient;

    vec4 diffuse=texture(material.diffuseTexture, TexCoords);
    if(material.diffuse.a>1)
    {
        diffuse=material.diffuse;
    }
    else
    {
        diffuse  = vec4(light.diffuse,1.0)  * diff * mix(diffuse,vec4(material.diffuse.rgb,0),material.diffuse.a);
    }
    vec3 specular=texture(material.specularTexture, TexCoords).rgb;
    if(material.specular.a>1)
    {
        specular=material.specular.rgb;
    }
    else
    {
        specular = (light.specular) * spec * mix(specular,(material.specular.rgb),material.specular.a);
    }
    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + vec4(specular,0.0));
}